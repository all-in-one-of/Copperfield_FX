{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"open",
				"openclQueue"
			],
			[
				"class",
				"classmethod"
			],
			[
				"_",
				"_engine"
			],
			[
				"cla",
				"classmethod"
			],
			[
				"frm",
				"frame"
			],
			[
				"set",
				"setFrame"
			],
			[
				"cl",
				"classmethod"
			],
			[
				"logg",
				"logging"
			],
			[
				"__",
				"__engine__"
			],
			[
				"in",
				"index"
			],
			[
				"data",
				"data_index"
			],
			[
				"Not",
				"NotImplementedError"
			],
			[
				"path",
				"path_list"
			],
			[
				"node_",
				"node_path"
			],
			[
				"node_p",
				"node_path_tuple"
			],
			[
				"sock",
				"socket_to"
			],
			[
				"link",
				"link_item"
			],
			[
				"node",
				"nodes_map"
			],
			[
				"up",
				"updateNodeDisplay"
			],
			[
				"is",
				"isRoot"
			],
			[
				"create",
				"createNode"
			],
			[
				"ROO",
				"ROOT_Network"
			],
			[
				"c",
				"ctx"
			],
			[
				"mgl",
				"mgl_ctx"
			],
			[
				"sl",
				"self"
			],
			[
				"fr",
				"fragment_shader_source"
			],
			[
				"ver",
				"vertex"
			],
			[
				"pyq",
				"pyqtSignal"
			],
			[
				"la",
				"layout"
			],
			[
				"QW",
				"QtWidgets"
			],
			[
				"Qt",
				"QtWidgets"
			],
			[
				"F",
				"FAILED"
			],
			[
				"coo",
				"cooked_op"
			],
			[
				"for",
				"force"
			],
			[
				"P",
				"PyQt5"
			],
			[
				"pro",
				"progress_cb"
			],
			[
				"rende",
				"render_modal"
			],
			[
				"ren",
				"render_modal"
			],
			[
				"file",
				"filename"
			],
			[
				"evalAs",
				"evalAsString"
			],
			[
				"wid",
				"widgets"
			],
			[
				"vie",
				"views_layout"
			],
			[
				"pan",
				"panel"
			],
			[
				"v",
				"value"
			],
			[
				"se",
				"self"
			],
			[
				"signal",
				"signals"
			],
			[
				"sli",
				"slider_needs_update"
			],
			[
				"li",
				"line_edit_needs_update"
			],
			[
				"pa",
				"parameterChanged"
			],
			[
				"Par",
				"ParmSignals"
			],
			[
				"parm",
				"parmChanged"
			],
			[
				"fil",
				"file_path"
			],
			[
				"s",
				"self"
			],
			[
				"view",
				"views"
			],
			[
				"vert",
				"vertices"
			],
			[
				"ori",
				"originPoint"
			],
			[
				"eva",
				"evalAsFloat"
			],
			[
				"co",
				"command"
			],
			[
				"panel_",
				"panel_type_name"
			],
			[
				"pi",
				"picked_item"
			],
			[
				"netw",
				"network_view_widget"
			],
			[
				"ima",
				"image_height"
			],
			[
				"img",
				"img_in_b"
			],
			[
				"tex",
				"texture_data"
			],
			[
				"dev",
				"devInBufferR"
			],
			[
				"fi",
				"filename"
			],
			[
				"te",
				"texture_data"
			],
			[
				"iamge_",
				"image_width"
			],
			[
				"ha",
				"have_gl"
			],
			[
				"outp",
				"output_driver"
			],
			[
				"Rea",
				"ReadCount"
			],
			[
				"N",
				"None"
			],
			[
				"Error",
				"Errors"
			],
			[
				"byt",
				"bytes"
			],
			[
				"UT",
				"UTF-8"
			],
			[
				"att",
				"attrib_list"
			],
			[
				"de",
				"debug"
			],
			[
				"di",
				"dict_stack"
			],
			[
				"appen",
				"append"
			],
			[
				"cur_",
				"cur_map"
			],
			[
				"E",
				"Errors"
			],
			[
				"p",
				"print"
			],
			[
				"par",
				"parser"
			],
			[
				"Bg",
				"ParserBGEO"
			],
			[
				"DETAIL",
				"ray_detail_1"
			],
			[
				"prin",
				"print"
			],
			[
				"read",
				"readWordBinary"
			],
			[
				"lin",
				"line_buf"
			],
			[
				"ifd",
				"ifd_commands"
			],
			[
				"st",
				"string"
			],
			[
				"sc",
				"scene_io_registry"
			],
			[
				"IO",
				"SCN_IFDTranslator"
			],
			[
				"srt",
				"string"
			],
			[
				"SCN",
				"SCN_IOTranslator"
			],
			[
				"io",
				"io_registry"
			],
			[
				"r",
				"return"
			],
			[
				"S",
				"SCN_IOTranslator"
			],
			[
				"R",
				"RendererOpenGL"
			],
			[
				"w",
				"width"
			],
			[
				"scne",
				"scene_files"
			],
			[
				"Ri",
				"Ri_Module"
			],
			[
				"re",
				"renderer"
			],
			[
				"Sce",
				"Scene_Reader"
			],
			[
				"n",
				"name"
			],
			[
				"if",
				"iface"
			],
			[
				"RIB",
				"RIB_File_Interface"
			],
			[
				"ri",
				"riDisplay"
			],
			[
				"glam",
				"glman_for_python"
			],
			[
				"a",
				"array_float"
			],
			[
				"arr",
				"array_int"
			],
			[
				"floatn",
				"floatnum"
			],
			[
				"rib_a",
				"rib_attribute_end"
			],
			[
				"line",
				"line_buff"
			],
			[
				"Wo",
				"WorldEnd"
			],
			[
				"W",
				"WorldBegin"
			],
			[
				"Op",
				"Opacity"
			],
			[
				"Fr",
				"Format"
			],
			[
				"flo",
				"floatnum3"
			],
			[
				"float",
				"floatnum"
			],
			[
				"rib",
				"rib_display"
			],
			[
				"floa",
				"floatnum"
			],
			[
				"floatnum",
				"floatnum3"
			],
			[
				"Co",
				"Combine"
			],
			[
				"fl",
				"floatnum"
			],
			[
				"log",
				"logger"
			],
			[
				"nod",
				"node_path"
			],
			[
				"ma",
				"maximizePanelManager"
			],
			[
				"hi",
				"historyIndex"
			]
		]
	},
	"buffers":
	[
		{
			"file": "bin/copper",
			"settings":
			{
				"buffer_size": 2702,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "from PyQt5 import Qt, QtWidgets, QtGui, QtCore\nfrom copper import parameter\n\nfrom copper import hou \nfrom gui.signals import signals\nfrom gui.widgets import PathBarWidget\nfrom gui.panels.base_panel import NetworkPanel\nfrom .parameters_widgets import *\n\nfrom copper.parm_template import ParmLookScheme, ParmNamingScheme, ParmTemplateType, StringParmType\n\ndef clearLayout(layout):\n    while layout.count():\n        child = layout.takeAt(0)\n        if child.widget() is not None:\n            child.widget().deleteLater()\n        elif child.layout() is not None:\n            clearLayout(child.layout())\n\n\nclass ParametersPanel(NetworkPanel):\n    def __init__(self):      \n        NetworkPanel.__init__(self)   \n\n        self.parameters_widget = ParametersWidget(self, self)\n        self.addWidget(self.parameters_widget)\n\n    @classmethod\n    def panelTypeName(cls):\n        return \"Parameters\"\n\n\nclass ParametersWidget(QtWidgets.QWidget):\n    def __init__(self, parent, panel):    \n        QtWidgets.QWidget.__init__(self, parent)\n        self.panel = panel\n\n        self.setMinimumWidth(320)\n        self.setMinimumHeight(160)\n\n        self.parm_box = QtWidgets.QVBoxLayout(self)\n        self.parm_box.setSpacing(0)\n        self.parm_box.setContentsMargins(0, 0, 0, 0)\n\n        no_op_label = QtWidgets.QLabel(\"No Operator Selected\")\n        no_op_label.setObjectName(\"info\")\n        no_op_label.setSizePolicy( QtWidgets.QSizePolicy( QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum ))\n        no_op_label.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)\n\n        self.parm_box.addStretch(1)\n        self.parm_box.addWidget(no_op_label)\n        self.parm_box.addStretch(1)\n\n        #Container Widget        \n        self.widget = QtWidgets.QWidget(self)\n        self.widget.setLayout(self.parm_box)\n        self.widget.setObjectName(\"Parameters\")\n\n        self.scroll = QtWidgets.QScrollArea()\n        self.scroll.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)\n        self.scroll.setWidgetResizable(True)\n        self.scroll.setWidget(self.widget)\n\n        self.header_bar = QtWidgets.QHBoxLayout()\n        self.header_bar.setSpacing(2)\n        self.header_bar.setContentsMargins(0, 0, 0, 0)\n\n        self.vbox = QtWidgets.QVBoxLayout()\n        self.vbox.setSpacing(0)\n        self.vbox.setContentsMargins(0, 0, 0, 0)\n\n        self.vbox.addLayout(self.header_bar)\n        self.vbox.addWidget(self.scroll)\n\n        self.setLayout(self.vbox)\n        self.setAcceptDrops(True)\n\n        # connect panel signals\n        self.panel.signals.copperNodeSelected.connect(self.nodeSelected)\n\n\n    @QtCore.pyqtSlot(str)\n    def nodeSelected(self, node_path=None):\n        if node_path in [None, \"/\"]:\n            return \n\n        node = hou.node(str(node_path))\n        \n        # remove old parms widgets\n        clearLayout(self.header_bar)\n        clearLayout(self.parm_box)\n\n        # build header\n        if node.iconName():\n            icon = QtGui.QIcon(node.iconName())\n        else:\n            icon = self.default_icon\n\n        node_btn = QtWidgets.QToolButton()\n        node_btn.setIcon(icon)\n        node_btn.setIconSize(QtCore.QSize(24,24))\n\n        node_type = QtWidgets.QLabel(node.label())\n        node_type.setStyleSheet(\"font-weight: bold\")\n   \n        node_name = QtWidgets.QLineEdit(node.name())\n\n        self.header_bar.addWidget(node_btn)\n        self.header_bar.addWidget(node_type)\n        self.header_bar.addWidget(node_name)\n        \n        # build new parms widgets\n        i = 1\n        for parm_template in node.parmGroups().keys():\n            parm_template_type = parm_template.type()\n\n            parms_layout = QtWidgets.QHBoxLayout()\n            parms_layout.setSpacing(1)\n            parms_layout.setContentsMargins(0, 0, 0, 0)\n            for parm in node.parmGroups()[parm_template]:\n                if parm_template_type is ParmTemplateType.Int:\n                    # Int\n                    widget = ParameterIntWidget(self, parm)\n\n                elif parm_template_type is ParmTemplateType.Float:\n                    # Float\n                    widget = ParameterFloatWidget(self, parm)\n                \n                elif parm_template_type is ParmTemplateType.Button:\n                    # Button\n                    widget = ParameterButtonWidget(self, parm)\n\n                elif parm_template_type is ParmTemplateType.Menu:\n                    # Menu\n                    widget = ParameterMenuWidget(self, parm)\n\n                elif parm_template_type is ParmTemplateType.Toggle:\n                    # Toggle\n                    widget = ParameterToggleWidget(self, parm)\n\n                elif parm_template_type is ParmTemplateType.String:\n                    # String\n                    widget = ParameterStringWidget(self, parm)\n\n                parms_layout.addWidget(widget) \n                \n\n            hbox = QtWidgets.QHBoxLayout()\n            if parm_template_type not in [ParmTemplateType.Toggle, ParmTemplateType.Button]:\n                \n                label = QtWidgets.QLabel(parm_template.label())\n                for parm_widget in parms_layout.children():\n                    parm_widget.signals.toggleParmExpand.emit()\n                \n                if parm_template.numComponents() == 1:\n                    label.setToolTip(\"Parameter: %s\" % parm.name())\n                else:\n                    label.setToolTip(\"Parameters: %s\" % [parm.name() for parm in node.parmGroups()[parm_template]])\n\n                label.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)\n                label.setStatusTip(parm.name())\n                label.setFixedWidth(140)\n                hbox.addWidget(label)\n            else:\n                hbox.addSpacing(143)\n\n            hbox.addLayout(parms_layout)\n\n            self.parm_box.addLayout(hbox)\n\n            i+=1\n\n        self.parm_box.addStretch(1)\n",
			"file": "gui/panels/parameters_panel/parameters_panel.py",
			"file_size": 5894,
			"file_write_time": 132206549333687419,
			"settings":
			{
				"buffer_size": 5894,
				"line_ending": "Unix"
			}
		},
		{
			"file": "venv/lib/python3.7/site-packages/matplotlib/backends/backend_qt5.py",
			"settings":
			{
				"buffer_size": 40319,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "try:\n    from PyQt5 import QtWidgets, Qt, QtGui, QtCore\nexcept:\n    frpm\n\nfrom gui.signals import signals\nfrom copper import hou as engine\n\nclass PathBarWidget(QtWidgets.QFrame):\n    def __init__(self, parent, panel): \n        QtWidgets.QFrame.__init__(self, parent)\n        self.panel = panel  \n        self.pinned = False\n        self.history = []\n        self.history_index = -1\n        self.setObjectName(\"pathBar\")\n        \n        self.layout = QtWidgets.QHBoxLayout()\n        self.layout.setSpacing(2)\n        self.layout.setContentsMargins(2, 2, 2, 2)\n\n        self.btn_back = QtWidgets.QToolButton(self)\n        self.btn_back.setIcon(QtGui.QIcon( \"gui/icons/main/go-previous.svg\"))\n        self.btn_back.setEnabled(False)\n        self.btn_back.pressed.connect(self.historyGoBack)\n\n        self.btn_frwd = QtWidgets.QToolButton(self)\n        self.btn_frwd.setIcon(QtGui.QIcon(\"gui/icons/main/go-next.svg\"))\n        self.btn_frwd.setEnabled(False)\n        self.btn_frwd.pressed.connect(self.historyGoForward)\n\n        self.btn_pin = QtWidgets.QToolButton(self)\n        self.btn_pin.setObjectName(\"pin\")\n        self.btn_pin.setCheckable(True)\n        self.btn_pin.pressed.connect(self.pinPressed)\n\n        self.path_layout = QtWidgets.QHBoxLayout()\n        self.path_layout.setSpacing(0)\n        self.path_layout.setContentsMargins(0, 0, 0, 0)\n\n        self.path_bar = QtWidgets.QFrame()\n        self.path_bar.setObjectName(\"bar\")\n        self.path_bar.setLayout(self.path_layout)\n\n        self.layout.addWidget(self.btn_back)\n        self.layout.addWidget(self.btn_frwd)\n        self.layout.addWidget(self.path_bar)\n        self.layout.addWidget(self.btn_pin)\n\n        self.setLayout(self.layout)\n        self.setAcceptDrops(True)\n        self.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)\n\n        self.buildPathBar(node_path=\"/obj\")\n\n        # connect panel signals\n        self.panel.signals.copperNodeSelected[str].connect(self.nodeSelected)\n\n    def historyGoBack(self):\n        if self.history_index > 0:\n            self.history_index -= 1\n            #print \"History back to: %s with index %s\" % (self.history[self.history_index], self.history_index)\n            self.btn_frwd.setEnabled(True)\n            if self.history_index == 0:\n                self.btn_back.setEnabled(False)\n\n            signals.copperNodeSelected.emit(self.history[self.history_index])\n\n    def historyGoForward(self):\n        if self.history_index < (len(self.history) - 1):\n            self.history_index += 1\n            #print \"History fwd to: %s with index %s\" % (self.history[self.history_index], self.history_index)\n            self.btn_back.setEnabled(True)\n            if self.history_index == (len(self.history) - 1):\n                self.btn_frwd.setEnabled(False)\n\n            signals.copperNodeSelected.emit(self.history[self.history_index])\n\n    def pinPressed(self):\n        if self.pinned == False:\n            self.pinned = True\n        else:\n            self.pinned = False\n\n    def isPinned(self):\n        return self.pinned\n\n    @QtCore.pyqtSlot(str)\n    def nodeSelected(self, node_path=None):\n        if node_path == \"/\":\n            return\n\n        if self.buildPathBar(node_path):\n            if self.history:\n                if self.history[-1] == node_path:\n                    return\n\n            self.history += [node_path]\n            self.history_index += 1\n            #print \"History added: %s at index %s\" % (node_path, self.history_index)\n            self.btn_back.setEnabled(True)\n\n    def buildPathBar(self, node_path=None):\n        node = engine.node(node_path)\n        if not node:\n            return False\n        elif node.isRoot():\n            btn = QtWidgets.QPushButton()\n        else:\n            parent = node.parent()\n            if parent.isRoot():\n                parent = node\n\n            for i in reversed(range(self.path_layout.count())): \n                self.path_layout.itemAt(i).widget().deleteLater()\n\n            btn = None\n\n            path_nodes = parent.pathAsNodeList()\n\n            for node in path_nodes:\n                btn = QtWidgets.QPushButton()\n                btn.setIcon(QtGui.QIcon(node.iconName()))\n                btn.setText(node.name())\n                btn.setSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)\n\n                menu = QtWidgets.QMenu()\n                for child in node.parent().children():\n                    menu.addAction(child.name())\n\n                btn.setMenu(menu)\n\n                self.path_layout.addWidget(btn)\n\n        if btn:\n            btn.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)\n\n        return True\n\n\n",
			"file": "gui/widgets/path_bar_widget.py",
			"file_size": 4665,
			"file_write_time": 132205542470038231,
			"settings":
			{
				"buffer_size": 4691,
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/obj/obj_node.py",
			"settings":
			{
				"buffer_size": 3277,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/op/op_cooking_queue.py",
			"settings":
			{
				"buffer_size": 1623,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/vmath/matrix4.py",
			"settings":
			{
				"buffer_size": 4922,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import sys, os\nimport logging\n\nfrom PyQt5 import QtWidgets, QtGui, QtCore, QtOpenGL\n\nfrom copper import hou\nfrom .tabbed_panel_manager import TabbedPanelManager\nfrom .dialogs import RenderNodeDialog\nfrom .widgets import PlayBarWidget\n\nlogger = logging.getLogger(__name__)\n\nclass Workarea(QtWidgets.QWidget):\n    def __init__(self, parent=None):\n        QtWidgets.QWidget.__init__(self, parent)\n        self.setObjectName(\"Workarea\")\n\n        # Basic widgets\n        self.timeline_widget = PlayBarWidget()\n\n        # Create layout and place widgets\n        VBox = QtWidgets.QVBoxLayout()    \n        VBox.setSpacing(0)\n        VBox.setContentsMargins(0, 0, 0, 0)\n        HBox = QtWidgets.QHBoxLayout()\n        HBox.setSpacing(0)\n        HBox.setContentsMargins(0, 0, 0, 0)\n    \n\n        # Add initial panels\n        panel_mgrs = []\n        panel_mgr_1 = TabbedPanelManager(self)\n        panel_mgr_1.addNewPaneTabByType(\"SceneViewPanel\")\n        panel_mgr_1.addNewPaneTabByType(\"CompositeViewPanel\")\n        #panel_mgr_1.addNewPaneTabByType(\"PythonShellPanel\")\n        panel_mgr_1.setSizePolicy(QtWidgets.QSizePolicy( QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding))\n        panel_mgrs += [panel_mgr_1]\n\n        panel_mgr_2 = TabbedPanelManager(self)\n        panel_mgr_2.addNewPaneTabByType(\"ParametersPanel\")\n        panel_mgr_2.setSizePolicy(QtWidgets.QSizePolicy( QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding))\n        panel_mgrs += [panel_mgr_2]\n\n        panel_mgr_3 = TabbedPanelManager(self)\n        panel_mgr_3.addNewPaneTabByType(\"NetworkViewPanel\")\n        panel_mgr_3.addNewPaneTabByType(\"TreeViewPanel\")\n        panel_mgr_3.setSizePolicy(QtWidgets.QSizePolicy( QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding))\n        panel_mgrs += [panel_mgr_3]        \n\n        # Set Up inital splitters layout\n        VSplitter = QtWidgets.QSplitter(QtCore.Qt.Vertical)\n        VSplitter.setMinimumWidth(370)\n        VSplitter.addWidget(panel_mgr_2)\n        VSplitter.addWidget(panel_mgr_3)\n\n        HSplitter = QtWidgets.QSplitter(QtCore.Qt.Horizontal)\n        HSplitter.addWidget(panel_mgr_1)\n        HSplitter.addWidget(VSplitter)\n        HSplitter.setStretchFactor (0, 1)\n        HSplitter.setStretchFactor (1, 0)  \n\n        VBox.addWidget(HSplitter)\n        VBox.addWidget(self.timeline_widget)\n        self.setLayout(VBox)\n\n        # Connect signals\n        for panel_mgr in panel_mgrs:\n            panel_mgr.maximize_button.clicked.connect(self.maximizePanelManager)\n\n        # Show workspace\n        self.show()\n\n    @QtCore.pyqtSlot()\n    def maximizePanelManager(self):\n        logger.debug(\"Maximize panel: %s\" % self)\n\n    @QtCore.pyqtSlot()   \n    def renderNode(self, node_path):\n        RenderNodeDialog.render(node_path)\n\nclass MainWindow(QtWidgets.QMainWindow):\n    def __init__(self):\n        super(MainWindow, self).__init__()\n\n        if not hou.have_gl:\n            logger.warning(\"OpenCL - OpenGL interoperability not supported !!!\")\n\n        self.initUI()\n\n    def close(self):\n        exit()\n\n    def open_project(self, make_test_project=False):\n        if make_test_project:\n            hou.test_project()\n            return\n\n        try:\n            fname = QtWidgets.QFileDialog.getOpenFileName(self, 'Open file', \"/Users\")\n        except:\n            raise\n        if fname:    \n            hou.open_project(str(fname))   \n\n    def save_project(self):\n        fname = QtWidgets.QFileDialog.getSaveFileName(self, 'Save file', \"/Users\")    \n        if fname:\n            hou.save_project(fname)\n\n    def load_style(self):\n        sqq_filename=\"gui/config/copper.stylesheet.qss\"\n        with open(sqq_filename,\"r\") as fh:\n            self.setStyleSheet(fh.read())\n\n    def initUI(self):\n        self.setMinimumWidth(960)\n        self.setMinimumHeight(640)\n        self.resize(1800, 1000)\n        self.workarea = Workarea(self)\n        self.setCentralWidget(self.workarea)\n\n        exitAction = QtWidgets.QAction(QtGui.QIcon('gui/icons/main/system-log-out.svg'), 'Exit', self)\n        exitAction.setObjectName(\"ActionExitApp\")\n        exitAction.setShortcut('Ctrl+Q')\n        exitAction.setStatusTip('Exit application')\n        exitAction.triggered.connect(self.close)\n\n        openAction = QtWidgets.QAction(QtGui.QIcon('gui/icons/main/document-open.svg'), 'Open project', self)\n        openAction.setShortcut('Ctrl+O')\n        openAction.setStatusTip('Open project')\n        openAction.triggered.connect(self.open_project)\n\n        saveAction = QtWidgets.QAction(QtGui.QIcon('gui/icons/main/document-save.svg'), 'Save project', self)\n        saveAction.setShortcut('Ctrl+S')\n        saveAction.setStatusTip('Save project')\n        saveAction.triggered.connect(self.save_project)\n\n\n        reloadStylAction = QtWidgets.QAction(QtGui.QIcon('gui/icons/main/view-refresh.svg'), 'Reload QSS', self)\n        reloadStylAction.setShortcut('Ctrl+R')\n        reloadStylAction.setStatusTip('Reload style')\n        reloadStylAction.triggered.connect(self.load_style)\n\n        menubar = self.menuBar()\n\n        fileMenu = menubar.addMenu('&File')\n        fileMenu.addAction(reloadStylAction)\n        fileMenu.addAction(openAction)\n        fileMenu.addAction(saveAction)\n        fileMenu.addAction(exitAction)\n\n        viewMenu = menubar.addMenu('&View')\n\n        helpManu = menubar.addMenu('&Help')\n        \n        toolbar = self.addToolBar('Toolbar')\n        toolbar.addAction(reloadStylAction)\n        toolbar.addAction(openAction)\n        toolbar.addAction(saveAction)\n        toolbar.addAction(exitAction)\n        \n        self.setWindowTitle(\"Copperfield\")\n        self.statusBar().showMessage('Ready...')",
			"file": "gui/main_window.py",
			"file_size": 5671,
			"file_write_time": 132205646927228603,
			"settings":
			{
				"buffer_size": 5671,
				"line_ending": "Unix"
			}
		},
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 388,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "requirements.txt",
			"settings":
			{
				"buffer_size": 777,
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/settings.py",
			"settings":
			{
				"buffer_size": 310,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/cl/effects_blur.cl",
			"settings":
			{
				"buffer_size": 2551,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/cl/effects_press_raster.cl",
			"settings":
			{
				"buffer_size": 3720,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import os\nfrom PyQt5 import QtWidgets, QtCore, QtGui\n\nfrom gui.signals import signals\nfrom copper.parm_template import ParmLookScheme, ParmNamingScheme, ParmTemplateType, StringParmType\n\nclass ParmSignals(QtCore.QObject):\n\tvalueChanged = QtCore.pyqtSignal(object)\n\ttoggleParmExpand =QtCore.pyqtSignal()\n\n\tdef __init__(self, parent=None):  \n\t\tQtCore.QObject.__init__(self, parent)\n\nclass ParameterBaseWidget(QtWidgets.QWidget):\n\tdef __init__(self, parent, parm):\n\t\tQtWidgets.QWidget.__init__(self, parent)\n\t\tself.signals = ParmSignals()\n\t\tself.parm = parm\n\t\tself.line_edit = None # Not all type of parm widget has line edit\n\t\tself._line_edit_changed = False\n\n\t\tself.layout = QtWidgets.QHBoxLayout(self)\n\t\tself.layout.setSpacing(2)\n\t\tself.layout.setContentsMargins(0, 0, 0, 0)\n\t\tself.setLayout(self.layout)\n\n\t\t# connect signals\n\t\tself.signals.valueChanged.connect(self.parmChanged)\n\t\tself.signals.toggleParmExpand.connect(self.toggleParmExpand)\n\t\tself.parm.signals.parameterChanged.connect(self.updateWidget) # sent by CopperParameter\n\n\tdef updateWidget(self):\n\t\tpass # TODO: raise uniplemented exception\n\n\t@QtCore.pyqtSlot()\n\tdef toggleParmExpand(self):\n\t\tpass\n\n\t@QtCore.pyqtSlot(object)\n\tdef parmChanged(self, value):\n\t\tparm_type = self.parm.parmTemplate().type()\n\t\tif parm_type is ParmTemplateType.Float:\n\t\t\tself.parm.signals.setParameter.emit(float(value))\n\t\telif parm_type is ParmTemplateType.Int:\n\t\t\tself.parm.signals.setParameter.emit(int(value))\n\t\telif parm_type is ParmTemplateType.String:\n\t\t\tself.parm.signals.setParameter.emit(str(value))\n\t\telif parm_type is ParmTemplateType.Menu:\n\t\t\tself.parm.signals.setParameter.emit(int(value))\n\n\t'''\n\tHandle drop event. Validate dropped data and set parameter.\n\t'''\n\tdef eventFilter(self, source, event):\n\t\tif (event.type() == QtCore.QEvent.Drop and source is self.line_edit):\n\t\t\tself.line_edit.setText(\"\")\n\t\t\tself.parm.signals.setParameter.emit(event.mimeData().text())\n\t\t\t#if self.line_edit:\n\t\t\t#\tself.line_edit.setText(\"\")\n\t\t\t#\tself.line_edit.dropEvent(event)\n\t\t\t#\tif event.isAccepted():\n\t\t\t\t\t#self.valueChanged.emit()\n\t\t\t#\t\tself.parm.set(str(value))\n\t\t\t#\treturn True\n\t\t\n\t\treturn QtWidgets.QWidget.eventFilter(self, source, event) # propagate event\n\n\nclass ParameterNumericalBaseWidget(ParameterBaseWidget):\n\tdef __init__(self, parent, parm):\n\t\tParameterBaseWidget.__init__(self, parent, parm)\n\n\t\tparm_template = self.parm.parmTemplate()\n\n\t\tif parm_template.type() is ParmTemplateType.Int:\n\t\t\tself.slider_resolution = 1\n\t\telse:\n\t\t\tself.slider_resolution = 1000\n\n\t\tself.line_edit = QtWidgets.QLineEdit(self.calcLineEditValueFromParm())\n\t\tself.line_edit.setMinimumWidth(60)\n\t\tself.line_edit_needs_update = False\n\t\tself.layout.addWidget(self.line_edit)\n\t\tself.slider = None\n\n\t\tif self.parm.parmTemplate().numComponents() == 1:\n\t\t\tself.line_edit.setMaximumWidth(140)\n\t\t\tself.slider_needs_update = False\n\t\t\tself.slider = QtWidgets.QSlider(self)\n\t\t\tself.slider.setOrientation(QtCore.Qt.Horizontal)\n\t\t\tself.slider.setMinimum(parm_template.min() * self.slider_resolution)\n\t\t\tself.slider.setMaximum(parm_template.max() * self.slider_resolution)\n\t\t\tself.slider.setValue(self.calcSliderValueFromParm())\n\t\t\tself.slider.setSingleStep(1)\n\t\t\tself.slider.setTracking(True)\n\t\t\tself.slider.sliderMoved[int].connect(self.processSlider)\n\t\t\tself.layout.addWidget(self.slider)\n\n\t\t# connect signals\n\t\tself.line_edit.editingFinished.connect(self.processLineEdit)\n\t\t#self.line_edit.textChanged.connect(self._lineEditChanged)\n\n\tdef calcLineEditValueFromParm(self):\n\t\treturn str(self.parm.eval())\n\n\tdef calcSliderValueFromParm(self):\n\t\treturn self.parm.eval() * self.slider_resolution\n\n\t@QtCore.pyqtSlot()\n\tdef updateWidget(self):\n\t\tif self.line_edit_needs_update:\n\t\t\tself.line_edit.setText(self.calcLineEditValueFromParm())\n\t\t\tself.line_edit_needs_update = False\n\n\t\tif self.slider_needs_update and self.slider:\n\t\t\tself.slider.setValue(self.calcSliderValueFromParm())\n\t\t\tself.slider_needs_update = False\n\n\t@QtCore.pyqtSlot(int)\n\tdef processSlider(self, value):\n\t\tself.line_edit_needs_update = True\n\t\tvalue = self.slider.value()\n\t\tself.signals.valueChanged.emit(float(value)/self.slider_resolution)\n\n\t@QtCore.pyqtSlot()\n\tdef processLineEdit(self):\n\t\tself.slider_needs_update = True\n\t\tvalue = self.line_edit.text()\n\t\tself.signals.valueChanged.emit(value)\n\nclass ParameterFloatWidget(ParameterNumericalBaseWidget):\n\tdef __init__(self, parent, parm):\n\t\tParameterNumericalBaseWidget.__init__(self, parent, parm)\n\n\nclass ParameterIntWidget(ParameterNumericalBaseWidget):\n\tdef __init__(self, parent, parm):\n\t\tParameterNumericalBaseWidget.__init__(self, parent, parm)\n\n\nclass ParameterToggleWidget(ParameterBaseWidget):\n\tdef __init__(self, parent, parm):\n\t\tParameterBaseWidget.__init__(self, parent, parm)\n\n\t\tself.checkbox = QtWidgets.QCheckBox(self)\n\t\tself.checkbox.setCheckState(self.parm.evalAsBool())\n\t\tself.checkbox.setTristate(on=False)\n\n\t\tself.label = QtWidgets.QLabel(parm.parmTemplate().label())\n\t\tself.label.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)\n\t\tself.label.setStatusTip(parm.name())\n\n\t\tself.layout.addWidget(self.checkbox)\n\t\tself.layout.addWidget(self.label)\n\t\tself.layout.addStretch(1)\n\n\t\t# connect signals\n\t\tself.checkbox.stateChanged.connect(self.processCheckbox)\n\n\tdef processCheckbox(self, state):\n\t\tself.signals.valueChanged.emit(state)\n\n\nclass ParameterMenuWidget(ParameterBaseWidget):\n\tdef __init__(self, parent, parm):\n\t\tParameterBaseWidget.__init__(self, parent, parm)\n\n\t\tself.combobox = QtWidgets.QComboBox(self)\n\t\tfor item_label in self.parm.menuLabels():\n\t\t\tself.combobox.addItem(item_label)\n\n\t\tself.combobox.setCurrentIndex(parm.evalAsInt())\n\n\t\tself.layout.addWidget(self.combobox)\n\n\t\tif parm.parmTemplate().numComponents() == 1:\n\t\t\tself.layout.addStretch(1)\n\n\t\t# connect signals\n\t\tself.combobox.currentIndexChanged.connect(self.processMenu)\n\n\tdef processMenu(self, item):\n\t\tself.signals.valueChanged.emit(item)\n\n\nclass ParameterButtonWidget(ParameterBaseWidget):\n\tdef __init__(self, parent, parm):\n\t\tParameterBaseWidget.__init__(self, parent, parm)\n\n\t\tself.button = QtWidgets.QPushButton(parm.parmTemplate().label(), self)\n\t\tself.button.setMinimumWidth(60)\n\n\t\tself.layout.addWidget(self.button)\n\t\t\n\t\tif parm.parmTemplate().numComponents() == 1:\n\t\t\tself.button.setMaximumWidth(140)\n\t\t\tself.layout.addStretch(1)\n\n\t\t# connect signals\n\t\tself.button.clicked.connect(parm.pressButton)\n\n\nclass ParameterStringWidget(ParameterBaseWidget):\n\tdef __init__(self, parent, parm):\n\t\tParameterBaseWidget.__init__(self, parent, parm)\n\n\t\tself.line_edit = QtWidgets.QLineEdit(parm.evalAsString())\n\t\tself.line_edit.setDragEnabled(True)\n\t\tself.line_edit.setAcceptDrops(True)\n\t\tself.line_edit.installEventFilter(self) # process drag'n'drop\n\t\tself.layout.addWidget(self.line_edit)\n\n\t\tif parm.parmTemplate().stringType() is StringParmType.FileReference:\n\t\t\tself.file_button = QtWidgets.QToolButton(self)\n\t\t\tself.file_button.setObjectName(\"file\")\n\t\t\tself.file_button.clicked.connect(self.browseFile)\n\t\t\tself.layout.addWidget(self.file_button)\n\t\telif parm.parmTemplate().stringType() is StringParmType.NodeReference:\n\t\t\tself.op_jump_button = QtWidgets.QToolButton(self)\n\t\t\tself.op_jump_button.setObjectName(\"op_jump\")\n\n\t\t\tself.op_path_button = QtWidgets.QToolButton(self)\n\t\t\tself.op_path_button.setObjectName(\"op_path\")\n\t\t\tself.op_path_button.clicked.connect(self.browseOp)\n\n\t\t\tself.layout.addWidget(self.op_jump_button)\n\t\t\tself.layout.addWidget(self.op_path_button)\t\n\n\t\t# connect signals\n\t\tself.line_edit.editingFinished.connect(self.processLineEdit)\n\n\tdef processLineEdit(self):\n\t\tvalue = self.line_edit.text()\n\t\tself.signals.valueChanged.emit(value)\n\n\tdef browseFile(self, lineEdit):\n\t\tfile_path, wildcard = QtWidgets.QFileDialog.getOpenFileName()\n\t\tself.line_edit.setText(file_path)\n\t\tself.signals.valueChanged.emit(file_path)\n\n\tdef browseOp(self, lineEdit):\n\t\t#op_path = QtWidgets.QFileDialog.getOpenFileName()\n\t\t#self.line_edit.setText(op_path)\n\t\t#self.valueChanged.emit()\n\t\tpass\n\n\n\n\n\n\n\n",
			"file": "gui/panels/parameters_panel/parameters_widgets.py",
			"file_size": 7931,
			"file_write_time": 132206549796959886,
			"settings":
			{
				"buffer_size": 7931,
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/rop/rop_composite.py",
			"settings":
			{
				"buffer_size": 1192,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/parameter.py",
			"settings":
			{
				"buffer_size": 6247,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "PyQt_API_Impl = None\nPyQt_API = None\n\ntry:\n\timport PyQt5 as PyQt_API\n\tPyQt_API_Impl = \"PyQt5\"\nexcept ImportError:\n\tpass\n\ntry:\n\timport PySide2 as PyQt_API\n\tPyQt_API_Impl = \"PySide2\"\nexcept ImportError:\n\tpass\n\nif PyQt_API_Impl == None:\n\traise Exception(\"No Qt for Python implementation found !!! PyQt5 or PySide2 required.\")\n\n#from .tabbed_panel_manager import TabbedPanelManager",
			"file": "gui/__init__.py",
			"file_size": 377,
			"file_write_time": 132211742200444358,
			"settings":
			{
				"buffer_size": 377,
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/op/op_parameters.py",
			"settings":
			{
				"buffer_size": 2893,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/op/op_node.py",
			"settings":
			{
				"buffer_size": 6975,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "gui/config/copper.stylesheet.qss",
			"settings":
			{
				"buffer_size": 11771,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/rop/rop_node.py",
			"settings":
			{
				"buffer_size": 1471,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/copper_string.py",
			"settings":
			{
				"buffer_size": 632,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/ui/widgets/path_bar_widget.py",
			"settings":
			{
				"buffer_size": 4671,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/geometry/iotranslators/obj/obj.py",
			"settings":
			{
				"buffer_size": 1930,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "test/geometry/cube.obj",
			"settings":
			{
				"buffer_size": 521,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "# cube.obj"
			}
		},
		{
			"file": "test/geometry/skeleton.obj",
			"settings":
			{
				"buffer_size": 1522308,
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/geometry/primitive.py",
			"settings":
			{
				"buffer_size": 1889,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/geometry/geometry.py",
			"settings":
			{
				"buffer_size": 1707,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/ui/__init__.py",
			"settings":
			{
				"buffer_size": 323,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/ui/tabbed_panel_manager.py",
			"settings":
			{
				"buffer_size": 4588,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/ui/panels/scene_view_panel/scene_view_panel.py",
			"settings":
			{
				"buffer_size": 14470,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/ui/panels/parameters_panel/parameters_panel.py",
			"settings":
			{
				"buffer_size": 5924,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/ui/panels/base_panel.py",
			"settings":
			{
				"buffer_size": 3999,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/ui/panels/composite_view_panel.py",
			"settings":
			{
				"buffer_size": 12631,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/ui/panels/help_browser_panel.py",
			"settings":
			{
				"buffer_size": 647,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/ui/panels/tree_view_panel.py",
			"settings":
			{
				"buffer_size": 5260,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/ui/panels/network_view_panel/network_view_panel.py",
			"settings":
			{
				"buffer_size": 1417,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import logging\n\nfrom PyQt5 import QtWidgets, QtGui, QtCore, QtOpenGL, Qt\nfrom OpenGL.GL import *\nfrom OpenGL import GL\nfrom OpenGL.GLU import *\n\nimport numpy\nimport copper\nimport math\n\nfrom copper import hou as engine\nfrom copper.op.base import OpRegistry\nfrom copper.ui.signals import signals\n\n\nfrom .node_item import NodeItem, NodeLinkItem\n\nlogger = logging.getLogger(__name__)\n\n\nclass NodeFlowScene(QtWidgets.QGraphicsScene):\n    def __init__(self, parent=None):      \n        QtWidgets.QGraphicsScene.__init__(self, parent) \n        self.nodes_map = {}\n\n        self.gridSizeWidth = 60\n        self.gridSizeHeight = 30 \n        self.zoomLevel = 1.0\n        self.setSceneRect(-100000, -100000, 200000, 200000)\n\n    @QtCore.pyqtSlot()\n    def addNode(self, node_path=None):\n        if node_path:\n            node = engine.node(node_path)\n            if node:\n                node_item= NodeItem(node)\n                self.addItem(node_item)\n                self.nodes_map[node_path] = node_item\n                node_item.autoPlace()\n\n    def buildNetworkLevel(self, node_path=None):\n        node = engine.node(node_path)\n        if node:\n            self.network_level = node_path\n            self.nodes_map = {}\n            self.clear()\n\n            # build node boxes\n            for child in node.children():\n                self.addNode(child.path())\n\n            # build links\n            for node_item in self.nodes_map.values():\n                for connection in node_item.inputConnections():\n                    socket_to = \n                    link_item = NodeLinkItem(socket_from, socket_to)\n                    self.addItem(link_item)\n\n    def zoom(self, zoomFactor):\n        self.zoomLevel *= zoomFactor\n\n    def drawBackground(self, painter, rect):\n        painter.fillRect(rect, QtGui.QColor(42, 42, 42))\n\n        if self.zoomLevel > 0.1:\n            # Draw grid\n            left = rect.left() - (rect.left() % self.gridSizeWidth)\n            top = rect.top() - (rect.top() % self.gridSizeHeight)\n     \n            lines = []\n     \n            x = left\n            while x < rect.right():\n                lines.append( QtCore.QLineF(x, rect.top(), x, rect.bottom()) )\n                x += self.gridSizeWidth\n\n            y = top\n            while y < rect.bottom():\n                lines.append( QtCore.QLineF(rect.left(), y, rect.right(), y) )\n                y += self.gridSizeHeight\n\n            pen = QtGui.QPen(QtGui.QColor(64, 64, 64), 1)\n            pen.setCosmetic(True)\n            painter.setPen(pen)\n            painter.drawLines(lines)\n\n    def drawForeground(self, painter, rect):\n        #painter.drawText(rect, \"Network type name\")\n        pass\n\n\n    def selectNode(self, node_path):\n        if node_path not in self.nodes_map:\n            # If node is not in map we need to rebuild visual network\n            node = engine.node(node_path)\n            self.buildNetworkLevel(node.parent().path())\n\n        # highlight selected node\n        self.nodes_map[node_path].select()\n\n    def contextMenuEvent(self, event):\n        network_node = engine.node(self.network_level)\n\n        menu = QtWidgets.QMenu(event.widget())\n        group = QtWidgets.QActionGroup(menu)\n        menu.addAction('Tool Menu...')\n\n        add_operators_menu = menu.addMenu(\"Add\")\n\n        node_types = network_node.childTypeCategory().nodeTypes()\n        for node_type_name, node_class in node_types.items():\n            icon = QtGui.QIcon(node_class.iconName())\n            action = add_operators_menu.addAction(icon, node_type_name)\n            action.setActionGroup(group)\n            action.setData(node_type_name)\n        \n        group.triggered.connect(self.addOperator)\n\n        menu.exec_(event.screenPos())\n\n    def addOperator(self, action):\n        network_node = engine.node(self.network_level)\n        network_node.createNode(action.data())\n",
			"file": "copper/ui/panels/network_view_panel/node_flow_scene.py",
			"file_size": 3723,
			"file_write_time": 132212528885069715,
			"settings":
			{
				"buffer_size": 3858,
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/ui/panels/network_view_panel/node_item.py",
			"settings":
			{
				"buffer_size": 11289,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/ui/widgets/play_bar_widget/time_line.py",
			"settings":
			{
				"buffer_size": 4124,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/ui/panels/parameters_panel/parameters_widgets.py",
			"settings":
			{
				"buffer_size": 7937,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/geometry/iotranslators/bgeo/bgeo.py",
			"settings":
			{
				"buffer_size": 469,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/cl/source_image.cl",
			"settings":
			{
				"buffer_size": 1536,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/engine.py",
			"settings":
			{
				"buffer_size": 7913,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/copper_cache.py",
			"settings":
			{
				"buffer_size": 783,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/hou/__init__.py",
			"settings":
			{
				"buffer_size": 1007,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/ui/main_window.py",
			"settings":
			{
				"buffer_size": 5705,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/__init__.py",
			"settings":
			{
				"buffer_size": 647,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/copper_object.py",
			"settings":
			{
				"buffer_size": 127,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/managers/__init__.py",
			"settings":
			{
				"buffer_size": 149,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/managers/root_network.py",
			"settings":
			{
				"buffer_size": 731,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/op/op_network.py",
			"settings":
			{
				"buffer_size": 7440,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/managers/mgr_node.py",
			"settings":
			{
				"buffer_size": 471,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/singleton.py",
			"settings":
			{
				"buffer_size": 847,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "# Taken from here: https://stackoverflow.com/quest"
			}
		},
		{
			"file": "copper/shout/parsers/base.py",
			"settings":
			{
				"buffer_size": 3294,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/shout/parsers/rib/parser_rib.py",
			"settings":
			{
				"buffer_size": 4596,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/shout/parsers/ifd/parser_ifd.py",
			"settings":
			{
				"buffer_size": 7255,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/shout/parsers/ifd/parser_bgeo.py",
			"settings":
			{
				"buffer_size": 1313,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/shout/shout.py",
			"settings":
			{
				"buffer_size": 3215,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/shout/parsers/ifd/hgeo.py",
			"settings":
			{
				"buffer_size": 37080,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/shout/drivers/mplay.py",
			"settings":
			{
				"buffer_size": 2273,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/shout/drivers/__init__.py",
			"settings":
			{
				"buffer_size": 25,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "test/mantra/test.ifd",
			"settings":
			{
				"buffer_size": 3738,
				"encoding": "Western (Windows 1252)",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 30760 files for \"logging.basicConfig\"\n\n/Users/max/dev/Copperfield_FX/bin/copper:\n   35  if __name__ == '__main__':\n   36      \"\"\"Main program. Sets up logging and do some work.\"\"\"\n   37:     logging.basicConfig(stream=sys.stderr, level=logging.DEBUG,\n   38                          format='%(name)s (%(levelname)s): %(message)s')\n   39  \n\n/Users/max/dev/Copperfield_FX/copper/shout/shout.py:\n   42  \n   43  \targs, unknown = parser.parse_known_args()\n   44: \tlogging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)\n   45  \n   46  \tscene_ext = None\n\n/Users/max/dev/Copperfield_FX/virtualenv/bin/pilfile.py:\n   63          logging_level = \"DEBUG\"\n   64  \n   65: logging.basicConfig(level=logging_level)\n   66  \n   67  \n\n/Users/max/dev/Copperfield_FX/virtualenv/lib/python2.7/site-packages/OpenGL/__init__.py:\n  123  \n  124          You will need to have a  logging configuration (e.g.\n  125:             logging.basicConfig()\n  126          ) call  in your top-level script to see the results of the\n  127          logging.\n\n/Users/max/dev/Copperfield_FX/virtualenv/lib/python2.7/site-packages/OpenGL/GLES2/shaders.py:\n   10  \"\"\"\n   11  import logging\n   12: logging.basicConfig()\n   13  log = logging.getLogger( __name__ )\n   14  from OpenGL.GLES2 import *\n\n/Users/max/dev/Copperfield_FX/virtualenv3/lib/python3.6/site-packages/OpenGL/__init__.py:\n  123  \n  124          You will need to have a  logging configuration (e.g.\n  125:             logging.basicConfig()\n  126          ) call  in your top-level script to see the results of the\n  127          logging.\n\n/Users/max/dev/Copperfield_FX/virtualenv3/lib/python3.6/site-packages/OpenGL/GLES2/shaders.py:\n   10  \"\"\"\n   11  import logging\n   12: logging.basicConfig()\n   13  log = logging.getLogger( __name__ )\n   14  from OpenGL.GLES2 import *\n\n7 matches across 7 files\n\n\nSearching 37885 files for \"clCreateImage failed:\"\n\n/Users/max/dev/Copperfield_FX/venv/lib/python3.6/site-packages/PyQt5/Qt/lib/libQt5WebEngineCore.so.5:\n    File too large, skipping\n\n0 matches",
			"settings":
			{
				"buffer_size": 2047,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "copper/cop2/cop2_file.py",
			"settings":
			{
				"buffer_size": 9987,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/op/op_data_socket.py",
			"settings":
			{
				"buffer_size": 339,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/cop2/cop2_node.py",
			"settings":
			{
				"buffer_size": 6176,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/sop/sop_node.py",
			"settings":
			{
				"buffer_size": 688,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/sop/sop_file.py",
			"settings":
			{
				"buffer_size": 1650,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "copper/sop/sop_box.py",
			"settings":
			{
				"buffer_size": 4533,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 199.0,
		"history":
		[
			"h",
			"help",
			"exit()",
			"ls"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/max/dev/Copperfield_FX",
		"/home/max/dev/Copperfield_FX/bin",
		"/home/max/dev/Copperfield_FX/copper",
		"/home/max/dev/Copperfield_FX/copper/hou",
		"/home/max/dev/Copperfield_FX/copper/ui",
		"/home/max/dev/Copperfield_FX/copper/ui/panels",
		"/home/max/dev/Copperfield_FX/copper/ui/panels/network_view_panel",
		"/home/max/dev/Copperfield_FX/copper/ui/panels/parameters_panel",
		"/home/max/dev/Copperfield_FX/copper/ui/panels/scene_view_panel"
	],
	"file_history":
	[
		"/home/max/dev/Copperfield_FX/gui/widgets/collapsable_widget.py",
		"/home/max/dev/Copperfield_FX/gui/panels/scene_view_panel/ogl_objcache.py",
		"/home/max/dev/Copperfield_FX/gui/panels/scene_view_panel/scene_view_panel.py",
		"/home/max/dev/Copperfield_FX/gui/panels/network_view_panel/node_flow_scene.py",
		"/home/max/dev/Copperfield_FX/gui/panels/network_view_panel/node_item.py",
		"/home/max/dev/Copperfield_FX/gui/panels/network_view_panel/network_view_panel.py",
		"/home/max/dev/Copperfield_FX/gui/panels/network_view_panel/__init__.py",
		"/home/max/dev/Copperfield_FX/gui/panels/python_syntax_highlighter.py",
		"/home/max/dev/Copperfield_FX/gui/panels/python_shell_panel.py",
		"/home/max/dev/Copperfield_FX/gui/tabbed_panel_manager.py",
		"/home/max/dev/Copperfield_FX/gui/panels/panel_registry.py",
		"/home/max/dev/Copperfield_FX/gui/panels/network_view_panel/network_view_widget.py",
		"/home/max/dev/Copperfield_FX/gui/panels/tree_view_panel.py",
		"/home/max/dev/Copperfield_FX/gui/signals.py",
		"/home/max/dev/Copperfield_FX/gui/panels/composite_view_panel.py",
		"/home/max/dev/Copperfield_FX/copper/op/op_root.py",
		"/home/max/dev/Copperfield_FX/gui/dialogs/render_modal_dialog.py",
		"/home/max/dev/Copperfield_FX/test/mantra/box.asc.ifd",
		"/home/max/dev/Copperfield_FX/test/mantra/tmp.ifd",
		"/home/max/dev/Copperfield_FX/test/geometry/untitled.bgeo",
		"/home/max/dev/Copperfield_FX/copper/lib/ubjson/decoder.py",
		"/home/max/dev/Copperfield_FX/copper/lib/ubjson/markers.py",
		"/home/max/dev/Copperfield_FX/copper/setup.py",
		"/home/max/dev/Copperfield_FX/copper/lib/bson.pyx",
		"/Users/max/dev/Copperfield_FX/test/mantra/tmp.ifd",
		"/Users/max/dev/Copperfield_FX/copper/lib/bson.pyx",
		"/Users/max/dev/Copperfield_FX/copper/lib/bson.pxd",
		"/Users/max/dev/Copperfield_FX/copper/lib/bson.pyx.dev",
		"/Users/max/dev/Copperfield_FX/copper/lib/bson.pyx.old",
		"/Users/max/dev/Copperfield_FX/copper/shout/parsers/ifd/binary_json.py",
		"/Users/max/dev/Copperfield_FX/test/mantra/hipoly.ifd",
		"/Users/max/dev/Copperfield_FX/test/mantra/simple.ifd",
		"/Users/max/dev/shout/src/shout_lib/utils.cpp",
		"/Users/max/dev/shout/src/shout_lib/utils.h",
		"/Users/max/dev/shout/src/shout_cmd/shout_cmd.cpp",
		"/Users/max/dev/shout/src/shout_lib/renderer_opengl.cpp",
		"/Users/max/dev/shout/src/shout_lib/SCN/SCN_Scene.h",
		"/Users/max/dev/shout/src/copper_lib/SYS/SYS_Types.h",
		"/Users/max/dev/shout/src/copper_lib/SYS/SYS_Compiler.h",
		"/Users/max/dev/shout/src/shout_lib/SCN/SCN_IORegistry.h",
		"/Users/max/dev/shout/src/shout_lib/SCN/SCN_IORegistry.cpp",
		"/Users/max/dev/shout/src/shout_lib/SCN/SCN_Scene.cpp",
		"/Users/max/dev/shout/src/shout_lib/display.cpp",
		"/Users/max/dev/shout/CMakeLists.txt",
		"/Users/max/dev/shout/src/shout_lib/CMakeLists.txt",
		"/Users/max/dev/shout/src/shout_lib/renderer.cpp",
		"/Users/max/dev/shout/src/shout_cmd/CMakeLists.txt",
		"/Users/max/dev/shout/src/shout_lib/SCN/SCN_IOTranslator.h",
		"/Users/max/dev/shout/src/shout_lib/SCN/SCN_IOTranslator.cpp",
		"/Users/max/dev/shout/src/shout_lib/SCN/SCN_IFDTranslator.h",
		"/Users/max/dev/shout/src/shout_lib/SCN/SCN_IFDTranslator.cpp",
		"/Users/max/dev/Copperfield_FX/bin/copper",
		"/Users/max/dev/Copperfield_FX/gui/main_window.py",
		"/Users/max/dev/Copperfield_FX/gui/panels/scene_view_panel/scene_view_panel.py",
		"/Users/max/dev/Copperfield_FX/copper/geometry/geometry.py",
		"/Users/max/dev/shout/src/display_sdl.h",
		"/Users/max/dev/shout/src/display_sdl.cpp",
		"/Users/max/dev/shout/cmake/ExternalAntlr4Cpp.cmake",
		"/Users/max/dev/glman/CMakeLists.txt",
		"/Users/max/dev/glman/src/glman_lib/CMakeLists.txt",
		"/Users/max/dev/glman/src/glman_cmd/CMakeLists.txt",
		"/Users/max/dev/glman/src/glman_for_python/CMakeLists.txt",
		"/Users/max/dev/shout/src/CMakeLists.txt",
		"/Users/max/dev/shout/src/shout_lib/display.h",
		"/Users/max/dev/glman/src/glman_lib/loaders/rib_loader.cpp",
		"/Users/max/dev/shout/src/shout.cpp",
		"/Users/max/dev/glman/src/glman_cmd/glman_cmd.cpp",
		"/Users/max/Downloads/IFDLexer.h",
		"/Users/max/Downloads/IFDVisitor.h",
		"/Users/max/Downloads/IFDBaseVisitor.h",
		"/Users/max/Downloads/IFDParser.h",
		"/Users/max/dev/glman/tests/scenes/test.ifd",
		"/Users/max/dev/nexen/src/rop/CMakeLists.txt",
		"/Users/max/dev/nexen/src/rop/rop_nxn.cpp",
		"/Users/max/dev/nexen/CMakeLists.txt",
		"/Users/max/dev/nexen/src/rop/rop_nxn.h",
		"/Users/max/dev/glman/src/glman_lib/parsers/rib_parser.h",
		"/Users/max/dev/glman/src/glman_lib/renderer.cpp",
		"/Users/max/dev/glman/src/glman_lib/display.cpp",
		"/Users/max/dev/glman/include/glman_lib/interfaces/rib_file_interface.h",
		"/Users/max/dev/glman/include/glman_lib/interfaces/rib_rendering_interface.h",
		"/Users/max/dev/glman/src/glman_for_python/RiModule.cpp",
		"/Users/max/dev/glman/src/glman_for_python/glman_for_python.cpp",
		"/Users/max/dev/glman/src/glman_lib/Renderer.cpp",
		"/Users/max/dev/glman/src/glman_lib/Display.cpp",
		"/Users/max/dev/glman/src/glman_lib/interfaces/ifd_interface.cpp",
		"/Users/max/dev/glman/include/glman/loaders/rib_loader.h",
		"/Users/max/dev/glman/src/glman_lib/RIB_Rendering_Interface.cpp",
		"/Users/max/dev/glman/notes",
		"/Users/max/dev/glman/tests/scenes/pacman.rib",
		"/Users/max/dev/glman/include/glman/Display.h",
		"/Users/max/dev/glman/include/glman/RIB_Rendering_Interface.h",
		"/Users/max/dev/glman/src/glman_lib/IFD_Interface.cpp",
		"/Users/max/dev/glman/include/glman/IFD_Interface.h",
		"/Users/max/dev/glman/include/glman/RIB_File_Interface.h",
		"/Users/max/dev/glman/src/glman_lib/RIB_File_Interface.cpp",
		"/Users/max/dev/Copperfield_FX/test/mantra/test.rib",
		"/Users/max/dev/glman/include/glman/Scene_Reader.h",
		"/Users/max/dev/glman/src/glman_lib/Scene_Reader.cpp",
		"/Users/max/dev/CopperFX/src/copper_pymodule/HOM_Geometry.cpp",
		"/Users/max/dev/CopperFX/src/copper_pymodule/HOM_Module.cpp",
		"/Users/max/dev/CopperFX/include/copper/HOM/HOM_Module.h",
		"/Users/max/dev/CopperFX/src/copper_pymodule/HOM_Node.cpp",
		"/Users/max/dev/CopperFX/include/copper/HOM/HOM_Node.h",
		"/Users/max/dev/glman/include/glman/Renderer.h",
		"/Users/max/dev/glman/include/glman/ri.h",
		"/Users/max/dev/glman/python/glman_for_python/prman.py",
		"/Users/max/dev/CopperFX/CMakeLists.txt",
		"/Users/max/dev/glman/include/glman/RibInterface.h",
		"/Users/max/dev/glman/src/glman_lib/RibInterface.cpp",
		"/Users/max/Downloads/patch-FindBoost.cmake",
		"/Users/max/dev/Copperfield_FX/copper/shout/parsers/ifd/parser_ifd.py",
		"/Users/max/dev/Copperfield_FX/test/mantra/cornell-box.rib",
		"/Users/max/dev/Copperfield_FX/copper/shout/parsers/rib/parser_rib.py",
		"/Users/max/dev/Copperfield_FX/copper/shout/parsers/base.py",
		"/Users/max/dev/Copperfield_FX/copper/shout/shout.py",
		"/Users/max/Downloads/gaffer-0.48.0.0-osx/startup/gui/viewer.py",
		"/Users/max/Downloads/gaffer-0.48.0.0-osx/apps/gui/gui-1.py",
		"/Users/max/Downloads/gaffer-0.48.0.0-osx/bin/gaffer.py",
		"/Users/max/Downloads/gaffer-0.48.0.0-osx/bin/gaffer",
		"/Users/max/Downloads/EFI/CLOVER/config.plist",
		"/Users/max/Documents/stor1.htzr.s4account",
		"/Users/max/htzr.ovpn",
		"/Users/max/htzr_hosta01.ovpn",
		"/Users/max/htzr_stor1.ovpn",
		"/Users/max/dev/Copperfield_FX/test/mantra/test.ifd",
		"/Users/max/dev/Copperfield_FX/gui/panels/network_view_panel.py",
		"/Users/max/dev/Copperfield_FX/copper/shout/parsers/ifd/parser_bgeo.py"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			"/Users/max/dev/Copperfield_FX"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"None",
			"OP_Engine",
			"opCookingStarted",
			"emit",
			"clCreateImage failed:",
			"self._token",
			"_binaryToken",
			"Invalid binary token",
			"cdef",
			"self.Token",
			"_rawPageDataToTupleArray",
			"logging.basicConfig"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Engine",
			"OP_Root",
			"self.Token",
			"self._token",
			"        ''' Initialize _jValue '''\n        self.Token = token\n        self.Value = value\n        self.Type = 0\n\n    def event(self, parser, key=False):\n        '''\n            Method invoked to send an event to a Handle.  This invokes the\n            appropriate callback on the handle.\n        '''\n        handle = parser.Handle\n        if self.Token == JID_STRING:\n            if key:\n                return handle.jsonKey(parser, self.Value)\n            return handle.jsonString(parser, self.Value)\n        if self.Token == JID_BOOL:\n            return handle.jsonBool(parser, self.Value)\n        if self.Token in {JID_INT8:1,JID_INT16:1,JID_INT32:1,JID_INT64:1}:\n            return handle.jsonInt(parser, self.Value)\n        if self.Token in {JID_UINT8:1,JID_UINT16:1}:\n            return handle.jsonInt(parser, self.Value)\n        if self.Token in {JID_REAL16:1,JID_REAL32:1,JID_REAL64:1}:\n            return handle.jsonReal(parser, self.Value)\n        if self.Token == JID_MAP_BEGIN:\n            return handle.jsonBeginMap(parser)\n        if self.Token == JID_MAP_END:\n            return handle.jsonEndMap(parser)\n        if self.Token == JID_ARRAY_BEGIN:\n            return handle.jsonBeginArray(parser)\n        if self.Token == JID_ARRAY_END:\n            return handle.jsonEndArray(parser)\n        if self.Token == JID_NULL:\n            return handle.jsonNull(parser)\n        if self.Token == JID_UNIFORM_ARRAY:\n            if self.Type == JID_BOOL:"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 47,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "bin/copper",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2702,
						"regions":
						{
						},
						"selection":
						[
							[
								303,
								303
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "gui/panels/parameters_panel/parameters_panel.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5894,
						"regions":
						{
						},
						"selection":
						[
							[
								688,
								688
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "venv/lib/python3.7/site-packages/matplotlib/backends/backend_qt5.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40319,
						"regions":
						{
						},
						"selection":
						[
							[
								33490,
								33490
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14857.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "gui/widgets/path_bar_widget.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4691,
						"regions":
						{
						},
						"selection":
						[
							[
								72,
								72
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "copper/obj/obj_node.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3277,
						"regions":
						{
						},
						"selection":
						[
							[
								2953,
								2953
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 816.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "copper/op/op_cooking_queue.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1623,
						"regions":
						{
						},
						"selection":
						[
							[
								520,
								520
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "copper/vmath/matrix4.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4922,
						"regions":
						{
						},
						"selection":
						[
							[
								3592,
								3592
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1530.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "gui/main_window.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5671,
						"regions":
						{
						},
						"selection":
						[
							[
								1540,
								1540
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": ".gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 388,
						"regions":
						{
						},
						"selection":
						[
							[
								326,
								326
							]
						],
						"settings":
						{
							"syntax": "Packages/Git Formats/Git Ignore.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "requirements.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 777,
						"regions":
						{
						},
						"selection":
						[
							[
								481,
								481
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "copper/settings.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 310,
						"regions":
						{
						},
						"selection":
						[
							[
								68,
								68
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "copper/cl/effects_blur.cl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2551,
						"regions":
						{
						},
						"selection":
						[
							[
								1169,
								1169
							]
						],
						"settings":
						{
							"syntax": "Packages/Lisp/Lisp.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "copper/cl/effects_press_raster.cl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3720,
						"regions":
						{
						},
						"selection":
						[
							[
								627,
								627
							]
						],
						"settings":
						{
							"syntax": "Packages/Lisp/Lisp.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "gui/panels/parameters_panel/parameters_widgets.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7931,
						"regions":
						{
						},
						"selection":
						[
							[
								1451,
								1451
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "copper/rop/rop_composite.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1192,
						"regions":
						{
						},
						"selection":
						[
							[
								1130,
								1130
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "copper/parameter.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6247,
						"regions":
						{
						},
						"selection":
						[
							[
								5984,
								5984
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "gui/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 377,
						"regions":
						{
						},
						"selection":
						[
							[
								153,
								153
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "copper/op/op_parameters.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2893,
						"regions":
						{
						},
						"selection":
						[
							[
								2744,
								2744
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "copper/op/op_node.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6975,
						"regions":
						{
						},
						"selection":
						[
							[
								6938,
								6938
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3723.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "gui/config/copper.stylesheet.qss",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11771,
						"regions":
						{
						},
						"selection":
						[
							[
								7410,
								7410
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 6324.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "copper/rop/rop_node.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1471,
						"regions":
						{
						},
						"selection":
						[
							[
								1258,
								1258
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 459.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "copper/copper_string.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 632,
						"regions":
						{
						},
						"selection":
						[
							[
								39,
								39
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "copper/ui/widgets/path_bar_widget.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4671,
						"regions":
						{
						},
						"selection":
						[
							[
								271,
								271
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "copper/geometry/iotranslators/obj/obj.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1930,
						"regions":
						{
						},
						"selection":
						[
							[
								1359,
								1359
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 561.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "test/geometry/cube.obj",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 521,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "# cube.obj",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "test/geometry/skeleton.obj",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1522308,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "copper/geometry/primitive.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1889,
						"regions":
						{
						},
						"selection":
						[
							[
								442,
								442
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "copper/geometry/geometry.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1707,
						"regions":
						{
						},
						"selection":
						[
							[
								215,
								215
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "copper/ui/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 323,
						"regions":
						{
						},
						"selection":
						[
							[
								323,
								323
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "copper/ui/tabbed_panel_manager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4588,
						"regions":
						{
						},
						"selection":
						[
							[
								30,
								30
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "copper/ui/panels/scene_view_panel/scene_view_panel.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14470,
						"regions":
						{
						},
						"selection":
						[
							[
								1244,
								1244
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "copper/ui/panels/parameters_panel/parameters_panel.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5924,
						"regions":
						{
						},
						"selection":
						[
							[
								718,
								718
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "copper/ui/panels/base_panel.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3999,
						"regions":
						{
						},
						"selection":
						[
							[
								1572,
								1572
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "copper/ui/panels/composite_view_panel.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12631,
						"regions":
						{
						},
						"selection":
						[
							[
								7437,
								7437
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3264.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "copper/ui/panels/help_browser_panel.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 647,
						"regions":
						{
						},
						"selection":
						[
							[
								85,
								85
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "copper/ui/panels/tree_view_panel.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5260,
						"regions":
						{
						},
						"selection":
						[
							[
								321,
								321
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "copper/ui/panels/network_view_panel/network_view_panel.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1417,
						"regions":
						{
						},
						"selection":
						[
							[
								1100,
								1100
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "copper/ui/panels/network_view_panel/node_flow_scene.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3858,
						"regions":
						{
						},
						"selection":
						[
							[
								1534,
								1534
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "copper/ui/panels/network_view_panel/node_item.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11289,
						"regions":
						{
						},
						"selection":
						[
							[
								473,
								473
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "copper/ui/widgets/play_bar_widget/time_line.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4124,
						"regions":
						{
						},
						"selection":
						[
							[
								744,
								744
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "copper/ui/panels/parameters_panel/parameters_widgets.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7937,
						"regions":
						{
						},
						"selection":
						[
							[
								193,
								193
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "copper/geometry/iotranslators/bgeo/bgeo.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 469,
						"regions":
						{
						},
						"selection":
						[
							[
								187,
								187
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "copper/cl/source_image.cl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1536,
						"regions":
						{
						},
						"selection":
						[
							[
								534,
								534
							]
						],
						"settings":
						{
							"syntax": "Packages/Lisp/Lisp.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "copper/engine.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7913,
						"regions":
						{
						},
						"selection":
						[
							[
								3544,
								3544
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1530.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "copper/copper_cache.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 783,
						"regions":
						{
						},
						"selection":
						[
							[
								783,
								783
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "copper/hou/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1007,
						"regions":
						{
						},
						"selection":
						[
							[
								567,
								567
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "copper/ui/main_window.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5705,
						"regions":
						{
						},
						"selection":
						[
							[
								3231,
								3231
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1479.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "copper/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 647,
						"regions":
						{
						},
						"selection":
						[
							[
								145,
								145
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "copper/copper_object.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 127,
						"regions":
						{
						},
						"selection":
						[
							[
								127,
								127
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "copper/managers/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 149,
						"regions":
						{
						},
						"selection":
						[
							[
								10,
								10
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "copper/managers/root_network.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 731,
						"regions":
						{
						},
						"selection":
						[
							[
								512,
								512
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "copper/op/op_network.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7440,
						"regions":
						{
						},
						"selection":
						[
							[
								6890,
								6890
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "copper/managers/mgr_node.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 471,
						"regions":
						{
						},
						"selection":
						[
							[
								417,
								417
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "copper/singleton.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 847,
						"regions":
						{
						},
						"selection":
						[
							[
								847,
								847
							]
						],
						"settings":
						{
							"auto_name": "# Taken from here: https://stackoverflow.com/quest",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "copper/shout/parsers/base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3294,
						"regions":
						{
						},
						"selection":
						[
							[
								2275,
								2275
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 69,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "copper/shout/parsers/rib/parser_rib.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4596,
						"regions":
						{
						},
						"selection":
						[
							[
								1786,
								1786
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 68,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "copper/shout/parsers/ifd/parser_ifd.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7255,
						"regions":
						{
						},
						"selection":
						[
							[
								85,
								85
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 67,
					"type": "text"
				},
				{
					"buffer": 57,
					"file": "copper/shout/parsers/ifd/parser_bgeo.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1313,
						"regions":
						{
						},
						"selection":
						[
							[
								759,
								759
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				},
				{
					"buffer": 58,
					"file": "copper/shout/shout.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3215,
						"regions":
						{
						},
						"selection":
						[
							[
								2806,
								2806
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 59,
					"file": "copper/shout/parsers/ifd/hgeo.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37080,
						"regions":
						{
						},
						"selection":
						[
							[
								5045,
								5045
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 66,
					"type": "text"
				},
				{
					"buffer": 60,
					"file": "copper/shout/drivers/mplay.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2273,
						"regions":
						{
						},
						"selection":
						[
							[
								1262,
								1262
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"type": "text"
				},
				{
					"buffer": 61,
					"file": "copper/shout/drivers/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25,
						"regions":
						{
						},
						"selection":
						[
							[
								6,
								6
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 64,
					"type": "text"
				},
				{
					"buffer": 62,
					"file": "test/mantra/test.ifd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3738,
						"regions":
						{
						},
						"selection":
						[
							[
								434,
								435
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 65,
					"type": "text"
				},
				{
					"buffer": 63,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2047,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										201,
										220
									],
									[
										468,
										487
									],
									[
										690,
										709
									],
									[
										932,
										951
									],
									[
										1187,
										1206
									],
									[
										1472,
										1491
									],
									[
										1728,
										1747
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								1855,
								1855
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 836.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				},
				{
					"buffer": 64,
					"file": "copper/cop2/cop2_file.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9987,
						"regions":
						{
						},
						"selection":
						[
							[
								7516,
								7516
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2652.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 65,
					"file": "copper/op/op_data_socket.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 339,
						"regions":
						{
						},
						"selection":
						[
							[
								49,
								49
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 66,
					"file": "copper/cop2/cop2_node.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6176,
						"regions":
						{
						},
						"selection":
						[
							[
								5150,
								5150
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2225.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 67,
					"file": "copper/sop/sop_node.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 688,
						"regions":
						{
						},
						"selection":
						[
							[
								341,
								341
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 68,
					"file": "copper/sop/sop_file.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1650,
						"regions":
						{
						},
						"selection":
						[
							[
								1001,
								1001
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 69,
					"file": "copper/sop/sop_box.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4533,
						"regions":
						{
						},
						"selection":
						[
							[
								1745,
								1745
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 25.0
	},
	"pinned_build_system": "",
	"project": "copperfield.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 309.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
