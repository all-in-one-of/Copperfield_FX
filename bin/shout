#!/usr/bin/env python

import sys, argparse, textwrap
import logging

from .parsers import PraserIFD

logging.basicConfig(level = logging.DEBUG)
logger = logging.getLogger("shout")

if __name__ == "__main__":
	#from shout.modules.shout import Renderer
	arg_parser = argparse.ArgumentParser(prog='shout', usage='%(prog)s [options] [ifd/rib] [outputimage]', 
		description=textwrap.dedent('''\
			Reads an IFD/RIB scene from standard input and renders the image described.

			If the first argument after options ends in .ifd .rib, .ifd.gz or .ifd.sc, shout
			will read the scene description from that file.  If the argument does not
			have an IFD/RIB extension it will be used as the output image/device'''), 
		formatter_class=argparse.RawTextHelpFormatter)

	render_opts_group=arg_parser.add_argument_group('Render Options')
	render_opts_group.add_argument('-r', help='Force shout into ray tracing mode (no micro-polygon)', action='store_true', required=False)
	render_opts_group.add_argument('-q', help='Set render quality (0 to 10)', choices=xrange(0, 10), default=8, type=int, action='store', dest='quality', required=False)

	image_opts_group=arg_parser.add_argument_group('Image Options')
	image_opts_group.add_argument('-i', help='Render interactively', action='store_true', dest='interactive', default=False, required=False)

	ctrl_opts_group=arg_parser.add_argument_group('Control Options')
	ctrl_opts_group.add_argument('-f', help='Read IFD/RIB file specified instead of reading from stdin', action='store', dest='ifd_filename', metavar='file', required=False)
	ctrl_opts_group.add_argument('-e', help='Echo IFD/RIB read by parser to stdout', action='store_true', dest='echo', required=False)

	args = vars(arg_parser.parse_args())

	if args['interactive']:
		logger.info('Running Shout in interactive mode.')

	# Default IFD parser
	parser = ParserIFD()
	if args['echo']:
		parser.setEchoInput(True)

	ifd_filename = args['ifd_filename']
	if ifd_filename:
		logger.info('Reading IFD file: %s' % ifd_filename)
		with open(ifd_filename) as ifd_file:
			while not parser.isDone():
				for line in ifd_file:
					parser.parseLine(line)

	else:
		logger.info('Reading IFD from stdin')
		while not parser.isDone():
			parser.parseLine(sys.stdin.readline().rstrip('\n'))